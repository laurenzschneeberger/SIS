@page
@model StudentInformationSystem.Pages.Students.IndexModel
@{
    ViewData["Title"] = "Students";

    // Process error message for display
    string formattedErrorMessage = Model.ErrorMessage;
    if (!string.IsNullOrEmpty(Model.ErrorMessage) && Model.ErrorMessage.Contains("duplicate key value") &&
    Model.ErrorMessage.Contains("email"))
    {
        formattedErrorMessage = "This email address is already in use by another student. Please use a different email.";
    }
}

<style>
    /* -------------------------------------------------------
       Replicated styling from Analytics.cshtml for consistency
       ------------------------------------------------------- */
    .page-header {
        background: linear-gradient(135deg, #f5f7fa 0%, #e4edf9 100%);
        border-radius: 15px;
        padding: 2.5rem 2rem;
        margin-bottom: 2rem;
        position: relative;
        overflow: hidden;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.08);
    }

    /* Include the exact grid texture from Analytics */
    .page-header::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='100' height='100' viewBox='0 0 100 100'%3E%3Cg fill-rule='evenodd'%3E%3Cg fill='%23000000' fill-opacity='0.03'%3E%3Cpath opacity='.5' d='M96 95h4v1h-4v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15V0h1v15h9V0h1v15h9V0h1v15h9V0h1v15h9V0h1v15h9V0h1v15h9V0h1v15h9V0h1v15h9V0h1v15h4v1h-4v9h4v1h-4v9h4v1h-4v9h4v1h-4v9h4v1h-4v9zm-1 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm9-10h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm9-10v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-9-10h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9z'/%3E%3Cpath d='M6 5V0H5v5H0v1h5v94h1V6h94V5H6z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E");
        background-repeat: repeat;
        background-size: 100px 100px;
    }

    .page-title {
        font-size: 2.5rem;
        color: #2c3e50;
        margin-bottom: 0.5rem;
        font-weight: 700;
        text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.05);
    }

    .page-subtitle {
        font-size: 1.2rem;
        color: #34495e;
        font-weight: 300;
        max-width: 600px;
    }

    .floating-shapes {
        position: absolute;
        width: 100%;
        height: 100%;
        top: 0;
        left: 0;
        z-index: 0;
        overflow: hidden;
        pointer-events: none;
    }

    .shape {
        position: absolute;
        background: rgba(52, 152, 219, 0.1);
        border-radius: 50%;
    }

    .shape-1 {
        width: 60px;
        height: 60px;
        top: 20%;
        right: 10%;
        animation: float 8s ease-in-out infinite;
    }

    .shape-2 {
        width: 40px;
        height: 40px;
        bottom: 20%;
        right: 30%;
        animation: float 9s ease-in-out infinite 1s;
    }

    /* Match keyframes from Analytics */
    @@keyframes float {
        0% {
            transform: translateY(0) rotate(0deg);
        }

        50% {
            transform: translateY(-20px) rotate(10deg);
        }

        100% {
            transform: translateY(0) rotate(0deg);
        }
    }

    /* Card styling */
    .student-card {
        border: none;
        border-radius: 15px;
        box-shadow: 0 8px 20px rgba(0, 0, 0, 0.08);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        overflow: hidden;
        margin-bottom: 1.5rem;
        background: #fff;
    }

    .student-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 12px 25px rgba(0, 0, 0, 0.12);
    }

    .card-header {
        background: linear-gradient(135deg, #fff 0%, #f8f9fa 100%);
        border-bottom: 1px solid rgba(0, 0, 0, 0.05);
        padding: 1.25rem 1.5rem;
    }

    .card-header h4 {
        margin: 0;
        font-weight: 600;
        color: #2c3e50;
        font-size: 1.4rem;
    }

    .card-body {
        padding: 2rem;
    }

    /* Compact table styling */
    .student-list .card-body {
        padding: 1rem;
    }

    .student-list table {
        margin-bottom: 0;
    }

    .student-list table td {
        padding: 0.75rem 1rem;
        border-bottom: 1px solid rgba(0, 0, 0, 0.05);
    }

    /* Simplified date input styling */
    input[type="date"] {
        color: #aaa;
    }

    input[type="date"]:focus,
    input[type="date"]:valid {
        color: #000;
    }

    /* Hide the default date picker icon for a cleaner look */
    input[type="date"]::-webkit-calendar-picker-indicator {
        opacity: 0.5;
    }

    /* Circular action buttons */
    .action-btn {
        width: 38px;
        height: 38px;
        border-radius: 50%;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        margin: 0 3px;
        transition: background-color 0.2s ease;
    }

    .action-btn:hover {
        background-color: rgba(0, 0, 0, 0.05);
    }

    .action-btn i {
        font-size: 1.1rem;
    }

    /* Make buttons consistent with accent color (#316CF4) */
    .btn-accent {
        background-color: #316CF4;
        color: #fff;
        border: none;
    }

    .btn-accent:hover {
        background-color: #2852c4;
        color: #fff;
    }

    /* Delete confirmation modal */
    #deleteConfirmModal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 1050;
        align-items: center;
        justify-content: center;
    }

    .delete-modal-content {
        background-color: #fff;
        border-radius: 15px;
        width: 90%;
        max-width: 500px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.15);
        overflow: hidden;
        animation: modalFadeIn 0.3s ease;
    }

    .delete-modal-header {
        background: linear-gradient(135deg, #e74c3c 0%, #c0392b 100%);
        color: white;
        padding: 1.25rem 1.5rem;
        border-bottom: 1px solid rgba(0, 0, 0, 0.1);
    }

    .delete-modal-header h4 {
        margin: 0;
        font-weight: 600;
        font-size: 1.4rem;
    }

    .delete-modal-body {
        padding: 1.5rem;
        color: #555;
    }

    .delete-modal-footer {
        padding: 1rem 1.5rem;
        background: #f8f9fa;
        display: flex;
        justify-content: flex-end;
    }

    .delete-modal-footer .btn {
        margin-left: 0.5rem;
    }

    .btn-danger {
        background-color: #e74c3c;
        color: #fff;
        border: none;
    }

    .btn-danger:hover {
        background-color: #c0392b;
    }

        @@keyframes modalFadeIn {
        from {
            opacity: 0;
            transform: translateY(-20px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        // Setup auto-clearing of form fields
        setupFormClearingOnSubmit();

        // Delete confirmation functionality
        setupDeleteConfirmation();

        function setupFormClearingOnSubmit() {
            // Clear form if URL parameter is present (coming back after form submission)
            const urlParams = new URLSearchParams(window.location.search);
            if (urlParams.has('cleared') && urlParams.get('cleared') === 'true') {
                // Clear all visible form inputs
                clearFormFields();

                // Remove the parameter from URL
                history.replaceState({}, document.title, window.location.pathname);
            }

            // Add event listeners to form submit buttons
            const addButton = document.querySelector('button[asp-page-handler="Add"]');
            const updateButton = document.querySelector('button[asp-page-handler="Update"]');
            const form = document.querySelector('form');

            // Function to handle form submission and set flag
            function handleFormSubmit(e) {
                // Only set flag if form is valid
                if (form.checkValidity()) {
                    // Store the current timestamp to prevent race conditions and 
                    // ensure we only process the most recent form submission
                    const timestamp = new Date().getTime();
                    sessionStorage.setItem('formSubmitted', timestamp.toString());
                    sessionStorage.setItem('clearFields', 'true');
                }
            }

            // Attach listeners to both buttons
            if (addButton) {
                addButton.addEventListener('click', handleFormSubmit);
            }

            if (updateButton) {
                updateButton.addEventListener('click', handleFormSubmit);
            }

            // Check on page load if we need to redirect after a form submission
            const formSubmittedTime = sessionStorage.getItem('formSubmitted');
            const shouldClearFields = sessionStorage.getItem('clearFields');

            if (formSubmittedTime && shouldClearFields === 'true') {
                // Get current time and submitted time
                const currentTime = new Date().getTime();
                const submittedTime = parseInt(formSubmittedTime);

                // Only process if submitted within the last 2 seconds (prevents old submissions)
                if (currentTime - submittedTime < 2000) {
                    // Clear session storage flags
                    sessionStorage.removeItem('formSubmitted');
                    sessionStorage.removeItem('clearFields');

                    // Only redirect if not already on the cleared URL
                    if (!urlParams.has('cleared')) {
                        // Add a small delay to ensure the form submission has processed
                        setTimeout(function () {
                            window.location.href = window.location.pathname + '?cleared=true';
                        }, 100);
                    }
                } else {
                    // Clear old flags
                    sessionStorage.removeItem('formSubmitted');
                    sessionStorage.removeItem('clearFields');
                }
            }
        }

        function clearFormFields() {
            const formFields = document.querySelectorAll('.form-control:not([type="hidden"])');
            formFields.forEach(field => {
                field.value = '';
            });

            // Reset any validation messages if present
            const validationMessages = document.querySelectorAll('.text-danger');
            validationMessages.forEach(message => {
                message.textContent = '';
            });
        }

        function setupDeleteConfirmation() {
            const modal = document.getElementById('deleteConfirmModal');
            const deleteForm = document.getElementById('deleteForm');
            const deleteStudentIdInput = document.getElementById('deleteStudentId');

            // Add event listeners to all delete buttons
            const deleteButtons = document.querySelectorAll('.delete-student-btn');
            deleteButtons.forEach(button => {
                button.addEventListener('click', function (event) {
                    event.preventDefault();
                    const studentId = this.getAttribute('data-student-id');
                    const studentName = this.getAttribute('data-student-name');

                    // Set the student ID in the hidden form
                    deleteStudentIdInput.value = studentId;

                    // Update modal text if needed
                    const modalBody = modal.querySelector('.delete-modal-body p');
                    modalBody.textContent = `Are you sure you want to delete ${studentName}? This action cannot be undone.`;

                    // Show the modal
                    modal.style.display = 'flex';
                });
            });

            // Cancel button
            document.getElementById('deleteCancelBtn').addEventListener('click', function () {
                modal.style.display = 'none';
            });

            // Confirm button
            document.getElementById('deleteConfirmBtn').addEventListener('click', function () {
                // Submit the delete form
                deleteForm.action = window.location.pathname + "?handler=Delete";
                deleteForm.submit();
            });

            // Close when clicking outside the modal content
            modal.addEventListener('click', function (event) {
                if (event.target === modal) {
                    modal.style.display = 'none';
                }
            });
        }
    });
</script>

<div class="container">
    <section class="page-header position-relative mb-5">
        <div class="floating-shapes">
            <div class="shape shape-1"></div>
            <div class="shape shape-2"></div>
        </div>
        <div class="position-relative">
            <h1 class="page-title">Student Management</h1>
            <p class="page-subtitle">Configure and view your student enrollments here.</p>
        </div>
    </section>

    <!-- Status Message -->
    @if (!string.IsNullOrEmpty(Model.StatusMessage))
        {
    <div class="alert alert-info">@Model.StatusMessage</div>
        }

    <!-- Error Message - Now using the formatted message -->
    @if (!string.IsNullOrEmpty(Model.ErrorMessage))
    {
        <div class="alert alert-danger">@formattedErrorMessage</div>
    }

    <!-- Diagnostic Results -->
    @if (!string.IsNullOrEmpty(Model.DiagnosticResults))
    {
        <div class="alert alert-warning">@Model.DiagnosticResults</div>
    }

    <div class="student-card">
        <div class="card-header">
            <h4>Manage Student</h4>
        </div>
        <div class="card-body">
            <!-- Single Form for Add or Edit -->
            <form method="post">
                <!-- Hidden field to store EditingStudent.Id, if any -->
                <input asp-for="EditingStudent.Id" type="hidden" />

                <!-- Rearranged form layout with button inline -->
                <div class="row align-items-end">
                    <div class="col-md-3">
                        <div class="form-group">
                            <input asp-for="EditingStudent.FirstName" class="form-control" placeholder="First Name" />
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="form-group">
                            <input asp-for="EditingStudent.LastName" class="form-control" placeholder="Last Name" />
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="form-group">
                            <input asp-for="EditingStudent.EnrollmentDate" class="form-control" placeholder="mm/dd/yyyy"
                                type="date" />
                        </div>
                    </div>
                    <div class="col-md-2">
                        <div class="form-group">
                            <input asp-for="EditingStudent.Email" class="form-control" placeholder="Email" />
                        </div>
                    </div>
                    <div class="col-md-1">
                        @if (Model.EditingStudent != null && Model.EditingStudent.Id != 0)
                        {
                            <button type="submit" asp-page-handler="Update" class="btn btn-accent w-100">Update</button>
                            <button type="submit" asp-page-handler="Clear"
                                class="btn btn-secondary mt-2 w-100">Cancel</button>
                        }
                        else
                        {
                            <button type="submit" asp-page-handler="Add" class="btn btn-accent w-100">Add</button>
                        }
                    </div>
                </div>
            </form>
        </div>
    </div>

    <div class="student-card student-list">
        <div class="card-header">
            <h4>Student List</h4>
        </div>
        <div class="card-body">
            <table class="table align-middle">
                <thead>
                    <tr>
                        <th>First Name</th>
                        <th>Last Name</th>
                        <th>Enrollment Date</th>
                        <th>Email</th>
                        <th style="width: 120px;"></th>
                    </tr>
                </thead>
                <tbody>
                    @if (Model.Students?.Count > 0)
                    {
                        foreach (var student in Model.Students)
                        {
                            <tr>
                                <td>@student.FirstName</td>
                                <td>@student.LastName</td>
                                <td>@student.EnrollmentDate.ToString("yyyy-MM-dd")</td>
                                <td>@student.Email</td>
                                <td>
                                    <!-- Edit -->
                                    <form method="post" class="d-inline">
                                        <input type="hidden" name="id" value="@student.Id" />
                                        <button type="submit" asp-page-handler="Select" class="btn action-btn">
                                            <i class="bi bi-pencil" style="color: #316CF4;"></i>
                                        </button>
                                    </form>
                                    <!-- Delete - Modified to use data attributes -->
                                    <button class="btn action-btn delete-student-btn" data-student-id="@student.Id"
                                        data-student-name="@student.FirstName @student.LastName">
                                        <i class="bi bi-trash3" style="color: #e74c3c;"></i>
                                    </button>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="5">No students found.</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal - Added outside the container -->
<div id="deleteConfirmModal">
    <div class="delete-modal-content">
        <div class="delete-modal-header">
            <h4>Confirm Deletion</h4>
        </div>
        <div class="delete-modal-body">
            <p>Are you sure you want to delete this student? This action cannot be undone.</p>
        </div>
        <div class="delete-modal-footer">
            <button type="button" class="btn btn-secondary" id="deleteCancelBtn">Cancel</button>
            <button type="button" class="btn btn-danger" id="deleteConfirmBtn">Delete</button>
        </div>
    </div>
</div>

<!-- Hidden form for delete submission -->
<form id="deleteForm" method="post" style="display: none;">
    <input id="deleteStudentId" name="EditingStudent.Id" type="hidden" value="" />
    <input type="hidden" name="handler" value="Delete" />
</form>
